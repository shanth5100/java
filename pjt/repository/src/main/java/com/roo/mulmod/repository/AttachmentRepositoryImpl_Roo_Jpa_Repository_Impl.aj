// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.roo.mulmod.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.roo.mulmod.model.Attachment;
import com.roo.mulmod.model.QAttachment;
import com.roo.mulmod.model.User;
import com.roo.mulmod.repository.AttachmentRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect AttachmentRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: AttachmentRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AttachmentRepositoryImpl.FILE_NAME = "fileName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AttachmentRepositoryImpl.UZER = "uzer";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Attachment> AttachmentRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QAttachment attachment = QAttachment.attachment;
        
        JPQLQuery<Attachment> query = from(attachment);
        
        Path<?>[] paths = new Path<?>[] {attachment.fileName,attachment.uzer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FILE_NAME, attachment.fileName)
			.map(UZER, attachment.uzer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, attachment);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Attachment> AttachmentRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QAttachment attachment = QAttachment.attachment;
        
        JPQLQuery<Attachment> query = from(attachment);
        
        Path<?>[] paths = new Path<?>[] {attachment.fileName,attachment.uzer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(attachment.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FILE_NAME, attachment.fileName)
			.map(UZER, attachment.uzer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, attachment);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param uzer
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Attachment> AttachmentRepositoryImpl.findByUzer(User uzer, GlobalSearch globalSearch, Pageable pageable) {
        
        QAttachment attachment = QAttachment.attachment;
        
        JPQLQuery<Attachment> query = from(attachment);
        
        Assert.notNull(uzer, "uzer is required");
        
        query.where(attachment.uzer.eq(uzer));
        Path<?>[] paths = new Path<?>[] {attachment.fileName,attachment.uzer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FILE_NAME, attachment.fileName)
			.map(UZER, attachment.uzer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, attachment);
    }
    
}
